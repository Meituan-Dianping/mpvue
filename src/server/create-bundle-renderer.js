/* @flow */

import runInVm from './run-in-vm'
import { PassThrough } from 'stream'
import type { Renderer, RenderOptions } from './create-renderer'

const INVALID_MSG =
  'Invalid server-rendering bundle format. Should be a string ' +
  'or a bundle Object of type:\n\n' +
`{
  entry: string;
  files: { [filename: string]: string; };
  maps: { [filename: string]: string; };
}\n`

// The render bundle can either be a string (single bundled file)
// or a bundle manifest object generated by vue-ssr-webpack-plugin.
type RenderBundle = string | {
  entry: string;
  files: { [filename: string]: string; };
  maps: { [filename: string]: string; };
};

export function createBundleRendererCreator (createRenderer: () => Renderer) {
  return (bundle: RenderBundle, rendererOptions?: RenderOptions) => {
    const renderer = createRenderer(rendererOptions)
    let files, entry
    if (typeof bundle === 'object') {
      entry = bundle.entry
      files = bundle.files
      if (typeof entry !== 'string' || typeof files !== 'object') {
        throw new Error(INVALID_MSG)
      }
    } else if (typeof bundle === 'string') {
      entry = '__vue_ssr_bundle__'
      files = { '__vue_ssr_bundle__': bundle }
    } else {
      throw new Error(INVALID_MSG)
    }
    return {
      renderToString: (context?: Object, cb: (err: ?Error, res: ?string) => void) => {
        if (typeof context === 'function') {
          cb = context
          context = {}
        }
        runInVm(entry, files, context).then(app => {
          renderer.renderToString(app, cb)
        }).catch(cb)
      },
      renderToStream: (context?: Object) => {
        const res = new PassThrough()
        runInVm(entry, files, context).then(app => {
          const renderStream = renderer.renderToStream(app)
          renderStream.on('error', err => {
            res.emit('error', err)
          })
          renderStream.pipe(res)
        }).catch(err => {
          process.nextTick(() => {
            res.emit('error', err)
          })
        })
        return res
      }
    }
  }
}
